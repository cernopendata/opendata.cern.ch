# -*- coding: utf-8 -*-
#
# This file is part of CERN Open Data Portal.
# Copyright (C) 2015, 2016, 2017, 2018, 2021, 2022, 2023 CERN.
#
# CERN Open Data Portal is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# CERN Open Data Portal is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CERN Open Data Portal; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, CERN does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

version: "2"

services:

  # Use the following in your Python code to set a breakpoint:
  # ```
  # import wdb
  # wdb.set_trace()
  # ```
  # Then open the following URL to start debugging:
  # ```
  # firefox http://localhost:1984
  # ```
  wdb:
    image: docker.io/kozea/wdb:3.3.0
    ports:
      - "1984:1984"

  web:
    restart: "unless-stopped"
    image: cernopendata/static # Use this to make sure that COD3 Python-code image is built only once.
    depends_on:
      - static # Just to make sure that latest cernopendata/static -image is build before creating this container.
    command: bash -c "cernopendata run -h 0.0.0.0 --reload" # In case one needs to test/work with uWSGI comment out this CMD override.
    environment:
      - DEBUG=True
      - FLASK_DEBUG=1
      - WDB_SOCKET_SERVER=wdb
      - WDB_NO_BROWSER_AUTO_OPEN=True
      - INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://cernopendata:dbpass123@postgresql:5432/cernopendata
      - INVENIO_CACHE_REDIS_HOST=redis
      - INVENIO_CACHE_REDIS_URL=redis://redis:6379/0
      - INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://redis:6379/1
      - INVENIO_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ # Celery 3
      - INVENIO_CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ # Celery 4
      - INVENIO_CELERY_RESULT_BACKEND=redis://redis:6379/2
      - INVENIO_SEARCH_CLIENT_CONFIG={"use_ssl":True, "verify_certs":False, "http_auth":"admin:admin"}
      - INVENIO_SEARCH_HOSTS=https://opensearch:9200
      - INVENIO_PIDSTORE_DATACITE_TESTMODE=False
      - INVENIO_PIDSTORE_DATACITE_DOI_PREFIX=10.5072
      - INVENIO_PIDSTORE_DATACITE_USERNAME=CERN.OPENDATA
      - INVENIO_PIDSTORE_DATACITE_PASSWORD=CHANGE_ME
      - INVENIO_PIDSTORE_LANDING_BASE_URL=http://opendata.cern.ch/record/
      - INVENIO_ACCOUNTS_REGISTER_BLUEPRINT=None
#      - SENTRY_DSN=http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb@sentry:9000/2
#      - LOGGING_SENTRY_CELERY=True
    volumes:
      - ./cernopendata:/code/cernopendata
      - ./scripts:/code/scripts
    volumes_from:
      - static
    links:
      - postgresql
      - redis
      - opensearch
      - rabbitmq
      - wdb
#      - sentry
    ports:
      - "5000:5000"

  worker:
    restart: "unless-stopped"
    image: cernopendata/static # Use this to make sure that COD3 Python-code image is built only once.
    depends_on:
      - static # Just to make sure that latest cernopendata/static -image is build before creating this container.
    command: bash -c "celery -A cernopendata.celery worker --loglevel=INFO --concurrency=1"
    environment:
      - DEBUG=True
      - WDB_SOCKET_SERVER=wdb
      - WDB_NO_BROWSER_AUTO_OPEN=True
      - INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://cernopendata:dbpass123@postgresql:5432/cernopendata
      - INVENIO_CACHE_REDIS_HOST=redis
      - INVENIO_CACHE_REDIS_URL=redis://redis:6379/0
      - INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://redis:6379/1
      - INVENIO_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ # Celery 3
      - INVENIO_CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ # Celery 4
      - INVENIO_CELERY_RESULT_BACKEND=redis://redis:6379/2
      - INVENIO_SEARCH_CLIENT_CONFIG={"use_ssl":True, "verify_certs":False, "http_auth":"admin:admin"}
      - INVENIO_SEARCH_HOSTS=https://opensearch:9200
      - INVENIO_ACCOUNTS_REGISTER_BLUEPRINT=None
#      - SENTRY_DSN=http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb@sentry:9000/2
#      - LOGGING_SENTRY_CELERY=True
    volumes:
      - ./cernopendata:/code/cernopendata
      - ./scripts:/code/scripts
    volumes_from:
      - static
    links:
      - postgresql
      - redis
      - opensearch
      - rabbitmq
      - wdb
#      - sentry

  web-files:
    restart: "unless-stopped"
    image: cernopendata/static # Use this to make sure that COD3 Python-code image is built only once.
    depends_on:
      - static # Just to make sure that latest cernopendata/static -image is build before creating this container.
    command: bash -c "cernopendata run -h 0.0.0.0" # In case one needs to test/work with uWSGI comment out this.
    environment:
      - DEBUG=True
      - FLASK_DEBUG=1
      - WDB_SOCKET_SERVER=wdb
      - WDB_NO_BROWSER_AUTO_OPEN=True
      - INVENIO_SQLALCHEMY_DATABASE_URI=postgresql+psycopg2://cernopendata:dbpass123@postgresql:5432/cernopendata
      - INVENIO_CACHE_REDIS_HOST=redis
      - INVENIO_CACHE_REDIS_URL=redis://redis:6379/0
      - INVENIO_ACCOUNTS_SESSION_REDIS_URL=redis://redis:6379/1
      - INVENIO_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ # Celery 3
      - INVENIO_CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/ # Celery 4
      - INVENIO_CELERY_RESULT_BACKEND=redis://redis:6379/2
      - INVENIO_SEARCH_CLIENT_CONFIG={"use_ssl":True, "verify_certs":False, "http_auth":"admin:admin"}
      - INVENIO_SEARCH_HOSTS=https://opensearch:9200
      - INVENIO_PIDSTORE_DATACITE_TESTMODE=False
      - INVENIO_PIDSTORE_DATACITE_DOI_PREFIX=10.5072
      - INVENIO_PIDSTORE_DATACITE_USERNAME=CERN.OPENDATA
      - INVENIO_PIDSTORE_DATACITE_PASSWORD=CHANGE_ME
      - INVENIO_PIDSTORE_LANDING_BASE_URL=http://opendata.cern.ch/record/
      - INVENIO_ACCOUNTS_REGISTER_BLUEPRINT=None
#      - SENTRY_DSN=http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb@sentry:9000/2
#      - LOGGING_SENTRY_CELERY=True
    volumes:
      - ./cernopendata:/code/cernopendata
      - ./scripts:/code/scripts
    volumes_from:
      - static
    links:
      - postgresql
      - redis
      - opensearch
      - rabbitmq
      - wdb
#      - sentry
    ports:
      - "5001:5000"

  postgresql:
    restart: "unless-stopped"
    image: docker.io/library/postgres:14.8
    environment:
      - POSTGRES_USER=cernopendata
      - POSTGRES_DB=cernopendata
      - POSTGRES_PASSWORD=dbpass123
    ports:
      - "5432:5432"

  redis:
    restart: "unless-stopped"
    image: docker.io/library/redis:7
    ports:
      - "6379:6379"

  opensearch:
    restart: "unless-stopped"
    image: docker.io/opensearchproject/opensearch:2
    environment:
      - bootstrap.memory_lock=true
      # set to reasonable values on production
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    # mem_limit: 1g
    ports:
      - 9200:9200

  opensearch-dashboards:
    image: docker.io/opensearchproject/opensearch-dashboards:2 # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query

  rabbitmq:
    restart: "unless-stopped"
    image: docker.io/library/rabbitmq:3.12
    ports:
      - "4369:4369"
      - "5672:5672"

  static:
    restart: "no"
    command: "echo 'Static running...'"
    build:
      context: .
      args:
        DEBUG: 1
    image: cernopendata/static
    volumes:
      - /opt/invenio/var/instance/static
    user: invenio

  ## SENTRY - DO NOT USE THIS ON PRODUCTION (NOT SECURE)
  ##          Uncomment sentry prefixed services if you want to use Sentry
  ##          for catching error logs.
  ##          ! Remember to set / uncomment `SENTRY_DSN` and `LOGGING_SENTRY_CELERY`
  ##          ! environment variables for cernopendata services and
  ##          ! enable cernopendata service to reach sentry-service
  ##          ! (e.g. by 'links' docker-compose definition).
  ##          ! Default DSN public key: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
  ##          ! Default DSN secret key: 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'
  ##          Sentry UI can be reached at 'http://127.0.0.1:9000'
  ##          Other dockerized services can reach Sentry at 'http://sentry:9000'
  ##          (user: 'admin', password: 'admin')
  ##          Note that cernopendata services display errors and stack traces
  ##          on logs until sentry-service has started and is reachable
  ##          by cernopendata services.

#  sentry-base:
#    restart: unless-stopped
#    build: ./sentry
#    image: cernopendata/sentry
#    environment:
#      # Run `docker-compose run sentry config generate-secret-key`
#      # to get a proper the SENTRY_SECRET_KEY value.
#      - SENTRY_SECRET_KEY=more_than_thirty_two_characters_long_secret_key
#      - SENTRY_REDIS_HOST=redis
#      # If SENTRY_DB_NAME enabled, database with this name must exists.
#      # For PostgreSQL, this defaults to 'postgres'
##      - SENTRY_DB_NAME=cernopendata
#      - SENTRY_DB_USER=cernopendata
#      - SENTRY_DB_PASSWORD=dbpass123
#      - SENTRY_POSTGRES_HOST=postgresql
#      - SENTRY_RABBITMQ_HOST=rabbitmq:5672
#      - SENTRY_RABBITMQ_USERNAME=guest
#      - SENTRY_RABBITMQ_PASSWORD=guest
#
#  sentry:
#    restart: unless-stopped
#    extends: sentry-base
#    command: init_and_run
#    links:
#      - redis
#      - postgresql
#      - rabbitmq
#    ports:
#      - '9000:9000'
#
#  sentry-cron:
#    restart: unless-stopped
#    extends: sentry-base
#    command: run cron
#    depends_on:
#      - sentry
#    links:
#      - redis
#      - postgresql
#      - rabbitmq
#
#  sentry-worker:
#    restart: unless-stopped
#    extends: sentry-base
#    command: run worker
#    depends_on:
#      - sentry
#    links:
#      - redis
#      - postgresql
#      - rabbitmq
